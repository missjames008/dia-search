{"version":3,"sources":["question_mark.png","logo.png","components/Article.js","components/Header.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Article","article","className","href","url","target","alt","title","src","urlToImage","question_mark","description","publishedAt","Header","props","height","logo","text","Search","useState","searchValue","setSearchValue","value","onChange","e","type","placeholder","onClick","preventDefault","search","App","articles","setArticles","sortValue","setSortValue","selected","console","log","fetch","then","response","json","jsonResponse","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gLC6B5BC,EA1BC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OACE,yBAAKC,UAAU,qBACb,6BACE,uBAAGC,KAAMF,EAAQG,IAAKC,OAAO,SAC3B,yBACEC,IAAG,mBAAcL,EAAQM,OACzBC,IACyB,QAAvBP,EAAQQ,WAAuBC,IAAgBT,EAAQQ,cAK7D,wBAAIP,UAAU,SAASD,EAAQM,OAC/B,uBAAGL,UAAU,eAAeD,EAAQU,aACpC,uBAAGT,UAAU,QAAb,cAAgCD,EAAQW,aACxC,4BAAQV,UAAU,aAChB,uBAAGC,KAAMF,EAAQG,IAAKC,OAAO,SAA7B,iB,gBCRKQ,EATA,SAACC,GACd,OACE,4BAAQZ,UAAU,UAChB,yBAAKa,OAAO,KAAKP,IAAKQ,MACtB,4BAAKF,EAAMG,QCmCFC,EAxCA,SAACJ,GAAU,MAEcK,mBAAS,IAFvB,mBAEjBC,EAFiB,KAEJC,EAFI,KAqBxB,OACE,0BAAMnB,UAAU,UACd,2BACEA,UAAU,eACVoB,MAAOF,EACPG,SArB2B,SAACC,GAChCH,EAAeG,EAAEnB,OAAOiB,QAqBpBG,KAAK,OACLC,YAAY,2CAEd,2BACEC,QAhBqB,SAACH,GAC1BA,EAAEI,iBACFd,EAAMe,OAAOT,GANbC,EAAe,KAqBXI,KAAK,SACLH,MAAM,SACNpB,UAAU,mBCoBH4B,EAlDH,WAAO,IAAD,EACgBX,mBAAS,IADzB,mBACTY,EADS,KACCC,EADD,OAEkBb,mBAAS,aAF3B,mBAETc,EAFS,KAEEC,EAFF,KAsBhB,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,CAAQe,KAAK,gBACb,yBAAKf,UAAU,kBACb,4BACEA,UAAU,SACVoB,MAAOW,EACPV,SAzBuB,SAACC,GAC9BU,EAAaV,EAAEnB,OAAOiB,QAyBhBG,KAAK,QAEL,4BAAQU,UAAQ,EAACb,MAAM,aAAvB,aAGA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,eAAd,SAEF,kBAAC,EAAD,CAAQO,OA7BC,SAACT,GACdgB,QAAQC,IAAI,eAAgBjB,GAC5BgB,QAAQC,IAAI,YAAaJ,GACzBK,MAAM,sCAAD,OACmClB,EADnC,+BACqEa,EADrE,6CAGFM,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLN,QAAQC,IAAIK,GACZV,EAAYU,EAAaX,iBAuB3B,yBAAK7B,UAAU,YACZ6B,EAASY,KAAI,SAAC1C,EAAS2C,GAAV,OACZ,kBAAC,EAAD,CAASC,IAAG,UAAKD,EAAL,YAAc3C,EAAQM,OAASN,QAASA,U,MCrC1C6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.b041027f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/question_mark.06a523d0.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.f9d27c0a.png\";","import React from \"react\";\nimport question_mark from \"../question_mark.png\";\n\nconst Article = ({ article }) => {\n  return (\n    <div className=\"article-grid-item\">\n      <div>\n        <a href={article.url} target=\"blank\">\n          <img\n            alt={`Article: ${article.title}`}\n            src={\n              article.urlToImage === \"N/A\" ? question_mark : article.urlToImage\n            }\n          />\n        </a>\n\n        <h3 className=\"title\">{article.title}</h3>\n        <p className=\"description\">{article.description}</p>\n        <p className=\"date\">Published: {article.publishedAt}</p>\n        <button className=\"read-more\">\n          <a href={article.url} target=\"blank\">\n            Read more\n          </a>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Article;\n","import React from \"react\";\nimport logo from \"../logo.png\";\n\nconst Header = (props) => {\n  return (\n    <header className=\"header\">\n      <img height=\"50\" src={logo} />\n      <h2>{props.text}</h2>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\n\nconst Search = (props) => {\n  //set initial search value to empty\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  //set search value according to input\n  const handleSearchInputChanges = (e) => {\n    setSearchValue(e.target.value);\n  };\n\n  //reset search field to empty\n  const resetInputField = () => {\n    setSearchValue(\"\");\n  };\n\n  //execute search & reset\n  const callSearchFunction = (e) => {\n    e.preventDefault();\n    props.search(searchValue);\n    resetInputField();\n  };\n\n  return (\n    <form className=\"search\">\n      <input\n        className=\"search-input\"\n        value={searchValue}\n        onChange={handleSearchInputChanges}\n        type=\"text\"\n        placeholder=\"Search by title, subject, keyword, etc\"\n      />\n      <input\n        onClick={callSearchFunction}\n        type=\"submit\"\n        value=\"SEARCH\"\n        className=\"searchButton\"\n      />\n    </form>\n  );\n};\n\nexport default Search;\n","import React, { useState } from \"react\";\nimport \"../App.css\";\nimport Article from \"./Article\";\nimport Header from \"./Header\";\nimport Search from \"./Search\";\n\nconst App = () => {\n  const [articles, setArticles] = useState([]);\n  const [sortValue, setSortValue] = useState(\"relevance\");\n  //set sort value according to selection\n  const handleSortInputChanges = (e) => {\n    setSortValue(e.target.value);\n  };\n\n  //get searched articles\n  const search = (searchValue) => {\n    console.log(\"search value\", searchValue);\n    console.log(\"sortValue\", sortValue);\n    fetch(\n      `http://newsapi.org/v2/everything?q=${searchValue}&language=en&sortBy=${sortValue}&apiKey=e8beefd6ada2467e93fbc952cd0aa753`\n    )\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        console.log(jsonResponse);\n        setArticles(jsonResponse.articles);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <Header text=\"News Search\" />\n      <div className=\"search-section\">\n        <select\n          className=\"select\"\n          value={sortValue}\n          onChange={handleSortInputChanges}\n          type=\"text\"\n        >\n          <option selected value=\"relevancy\">\n            Relevance\n          </option>\n          <option value=\"popularity\">Popularity</option>\n          <option value=\"publishedAt\">Date</option>\n        </select>\n        <Search search={search} />\n      </div>\n\n      <div className=\"articles\">\n        {articles.map((article, index) => (\n          <Article key={`${index}-${article.title}`} article={article} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}